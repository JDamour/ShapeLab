// Each #kernel tells which function to compile; you can have many kernels

float MIN_DENSITY;
float MAX_DENSITY;

float toolPower;
float cosStrength;
float modRange;
uint dimension;
int sign;
float4 modCenter;
float4 Bounding_offSet;
float4 tipPosition;
float curMinDist;

int offsetX;
int offsetY;
int offsetZ;

//static
float PI = 3.14159265;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> voxel;

#pragma kernel densityModificator

[numthreads(4,4,4)]
void densityModificator (uint3 id : SV_DispatchThreadID)
{
	uint idX = id.x + offsetX;
	uint idY = id.y + offsetY;
	uint idZ = id.z + offsetZ; 

	// this voxel will be changed in this iteration
	uint voxelIndex = idX + idY * (dimension) + idZ * (dimension) * (dimension);

    if (idX <= 0 || idX >= dimension - 1 || idY <= 0 || idY >= dimension - 1 || idZ <= 0 || idZ >= dimension - 1){
		return;
	}
	
	float newDensity;
	float4 voxelPos = {idX, idY, idZ, 1.0};
	float dist = distance(voxelPos, modCenter);

	if(dist > modRange){
		return;
	}
	newDensity = voxel[voxelIndex];
	newDensity += sign * pow(abs(toolPower * cos(dist/modRange)), cosStrength);
	if(newDensity > 0 && voxel[voxelIndex] < 0){
		voxel[voxelIndex] = 0.001f;
		return;
	}
	if(newDensity < 0 && voxel[voxelIndex] > 0){
		voxel[voxelIndex] = -0.001f;
		return;
	}
	voxel[voxelIndex] = max(min(newDensity,MAX_DENSITY),MIN_DENSITY);
}
//---------------------------------------------------------------------------------------------
#pragma kernel smooth3x3Modificator

[numthreads(8,8,8)]
void smooth3x3Modificator (uint3 id : SV_DispatchThreadID)
{
    if (id.x == 0 || id.x == dimension - 1 || id.y == 0 || id.y == dimension - 1 || id.z == 0 || id.z == dimension - 1)
		return;
	
	uint voxelIndex = id.x + id.y * (dimension) + id.z * (dimension) * (dimension);
	float4 voxelPos = {id.x, id.y, id.z, 1.0};
	float dist = distance(voxelPos, modCenter);

	if(dist > modRange){
		return;
	}

	//get sourrounding voxels desities
	uint indecies[3*3*3] = {
		(id.x+1) + (id.y+1) * (dimension) + (id.z+1) * (dimension) * (dimension),
		(id.x) + (id.y+1) * (dimension) + (id.z+1) * (dimension) * (dimension),
		(id.x-1) + (id.y+1) * (dimension) + (id.z+1) * (dimension) * (dimension),

		(id.x+1) + (id.y) * (dimension) + (id.z+1) * (dimension) * (dimension),
		(id.x) + (id.y) * (dimension) + (id.z+1) * (dimension) * (dimension),
		(id.x-1) + (id.y) * (dimension) + (id.z+1) * (dimension) * (dimension),

		(id.x+1) + (id.y-1) * (dimension) + (id.z+1) * (dimension) * (dimension),
		(id.x) + (id.y-1) * (dimension) + (id.z+1) * (dimension) * (dimension),
		(id.x-1) + (id.y-1) * (dimension) + (id.z+1) * (dimension) * (dimension),


		(id.x+1) + (id.y+1) * (dimension) + (id.z) * (dimension) * (dimension),
		(id.x) + (id.y+1) * (dimension) + (id.z) * (dimension) * (dimension),
		(id.x-1) + (id.y+1) * (dimension) + (id.z) * (dimension) * (dimension),

		(id.x+1) + (id.y) * (dimension) + (id.z) * (dimension) * (dimension),
		(id.x) + (id.y) * (dimension) + (id.z) * (dimension) * (dimension),
		(id.x-1) + (id.y) * (dimension) + (id.z) * (dimension) * (dimension),

		(id.x+1) + (id.y-1) * (dimension) + (id.z) * (dimension) * (dimension),
		(id.x) + (id.y-1) * (dimension) + (id.z) * (dimension) * (dimension),
		(id.x-1) + (id.y-1) * (dimension) + (id.z) * (dimension) * (dimension),


		(id.x+1) + (id.y+1) * (dimension) + (id.z-1) * (dimension) * (dimension),
		(id.x) + (id.y+1) * (dimension) + (id.z-1) * (dimension) * (dimension),
		(id.x-1) + (id.y+1) * (dimension) + (id.z-1) * (dimension) * (dimension),

		(id.x+1) + (id.y) * (dimension) + (id.z-1) * (dimension) * (dimension),
		(id.x) + (id.y) * (dimension) + (id.z-1) * (dimension) * (dimension),
		(id.x-1) + (id.y) * (dimension) + (id.z-1) * (dimension) * (dimension),

		(id.x+1) + (id.y-1) * (dimension) + (id.z-1) * (dimension) * (dimension),
		(id.x) + (id.y-1) * (dimension) + (id.z-1) * (dimension) * (dimension),
		(id.x-1) + (id.y-1) * (dimension) + (id.z-1) * (dimension) * (dimension),
	};
	
	float indexWeight[3*3*3] = {
		0.3f,
		0.5f,
		0.3f,
		0.5f,
		1.0f,
		0.5f,
		0.3f,
		0.5f,
		0.3f,

		0.5f,
		1.0f,
		0.5f,
		1.0f,
		1.0f+sin(dist/(modRange))*50.0f * toolPower, //dist==0:sin(0)=>max influence of sourrounding voxels
		1.0f,
		0.5f,
		1.0f,
		0.5f,

		0.3f,
		0.5f,
		0.3f,
		0.5f,
		1.0f,
		0.5f,
		0.3f,
		0.5f,
		0.3f,
	};

	float newDensity = 0;
	float allWeights = 0;
	for(uint i=0;i<3*3*3;i++){
		newDensity += voxel[indecies[i]]*indexWeight[i];
		allWeights += indexWeight[i];
	}
	newDensity /= allWeights;
	if(newDensity > 0 && voxel[voxelIndex] < 0){
		voxel[voxelIndex] = 0.001f;
		return;
	}
	if(newDensity < 0 && voxel[voxelIndex] > 0){
		voxel[voxelIndex] = -0.001f;
		return;
	}
	
	voxel[voxelIndex] = max(min(newDensity,MAX_DENSITY),MIN_DENSITY);
	
}
